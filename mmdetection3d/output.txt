11/08 14:55:38 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.0 (default, Mar  3 2022, 09:58:08) [GCC 7.5.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1846633054
    GPU 0: NVIDIA GeForce RTX 2080 SUPER
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 12.2, V12.2.91
    GCC: gcc (Ubuntu 11.4.0-2ubuntu1~20.04) 11.4.0
    PyTorch: 2.4.1+cu121
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.19.1+cu121
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1846633054
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

11/08 14:55:40 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=32, enable=False)
backend_args = None
class_names = [
    'Car',
    'Pedestrian',
    'Cyclist',
]
data_root = '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_format'
dataset_type = 'WaymoDataset'
db_sampler = dict(
    backend_args=None,
    classes=[
        'Car',
        'Pedestrian',
        'Cyclist',
    ],
    data_root='data/waymo/kitti_format/',
    info_path='data/waymo/kitti_format/waymo_dbinfos_train.pkl',
    points_loader=dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=6,
        type='LoadPointsFromFile',
        use_dim=[
            0,
            1,
            2,
            3,
            4,
        ]),
    prepare=dict(
        filter_by_difficulty=[
            -1,
        ],
        filter_by_min_points=dict(Car=5, Cyclist=10, Pedestrian=10)),
    rate=1.0,
    sample_groups=dict(Car=15, Cyclist=10, Pedestrian=10))
default_hooks = dict(
    checkpoint=dict(interval=-1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='Det3DVisualizationHook'))
default_scope = 'mmdet3d'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
eval_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=6,
        type='LoadPointsFromFile',
        use_dim=5),
    dict(
        keys=[
            'points',
        ],
        meta_keys=[
            'box_type_3d',
            'sample_idx',
            'context_name',
            'timestamp',
        ],
        type='Pack3DDetInputs'),
]
input_modality = dict(use_camera=False, use_lidar=True)
launcher = 'none'
load_from = 'checkpoints/hv_pointpillars_secfpn_sbn_2x16_2x_waymoD5-3d-3class_20200831_204144-d1a706b1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
lr = 0.001
metainfo = dict(classes=[
    'Car',
    'Pedestrian',
    'Cyclist',
])
model = dict(
    data_preprocessor=dict(
        type='Det3DDataPreprocessor',
        voxel=True,
        voxel_layer=dict(
            max_num_points=20,
            max_voxels=(
                32000,
                32000,
            ),
            point_cloud_range=[
                -74.88,
                -74.88,
                -2,
                74.88,
                74.88,
                4,
            ],
            voxel_size=[
                0.32,
                0.32,
                6,
            ])),
    pts_backbone=dict(
        in_channels=64,
        layer_nums=[
            3,
            5,
            5,
        ],
        layer_strides=[
            1,
            2,
            2,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.01, type='naiveSyncBN2d'),
        out_channels=[
            64,
            128,
            256,
        ],
        type='SECOND'),
    pts_bbox_head=dict(
        anchor_generator=dict(
            ranges=[
                [
                    -74.88,
                    -74.88,
                    -0.0345,
                    74.88,
                    74.88,
                    -0.0345,
                ],
                [
                    -74.88,
                    -74.88,
                    0,
                    74.88,
                    74.88,
                    0,
                ],
                [
                    -74.88,
                    -74.88,
                    -0.1188,
                    74.88,
                    74.88,
                    -0.1188,
                ],
            ],
            reshape_out=False,
            rotations=[
                0,
                1.57,
            ],
            sizes=[
                [
                    4.73,
                    2.08,
                    1.77,
                ],
                [
                    0.91,
                    0.84,
                    1.74,
                ],
                [
                    1.81,
                    0.84,
                    1.77,
                ],
            ],
            type='AlignedAnchor3DRangeGenerator'),
        bbox_coder=dict(code_size=7, type='DeltaXYZWLHRBBoxCoder'),
        diff_rad_by_sin=True,
        dir_offset=-0.7854,
        feat_channels=384,
        in_channels=384,
        loss_bbox=dict(
            beta=0.1111111111111111,
            loss_weight=1.0,
            type='mmdet.SmoothL1Loss'),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=1.0,
            type='mmdet.FocalLoss',
            use_sigmoid=True),
        loss_dir=dict(
            loss_weight=0.2, type='mmdet.CrossEntropyLoss', use_sigmoid=False),
        num_classes=3,
        type='Anchor3DHead',
        use_direction_classifier=True),
    pts_middle_encoder=dict(
        in_channels=64, output_shape=[
            468,
            468,
        ], type='PointPillarsScatter'),
    pts_neck=dict(
        in_channels=[
            64,
            128,
            256,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.01, type='naiveSyncBN2d'),
        out_channels=[
            128,
            128,
            128,
        ],
        type='SECONDFPN',
        upsample_strides=[
            1,
            2,
            4,
        ]),
    pts_voxel_encoder=dict(
        feat_channels=[
            64,
        ],
        in_channels=5,
        norm_cfg=dict(eps=0.001, momentum=0.01, type='naiveSyncBN1d'),
        point_cloud_range=[
            -74.88,
            -74.88,
            -2,
            74.88,
            74.88,
            4,
        ],
        type='HardVFE',
        voxel_size=[
            0.32,
            0.32,
            6,
        ],
        with_cluster_center=True,
        with_distance=False,
        with_voxel_center=True),
    test_cfg=dict(
        pts=dict(
            max_num=500,
            min_bbox_size=0,
            nms_across_levels=False,
            nms_pre=4096,
            nms_thr=0.25,
            score_thr=0.1,
            use_rotate_nms=True)),
    train_cfg=dict(
        pts=dict(
            allowed_border=0,
            assigner=[
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(type='BboxOverlapsNearest3D'),
                    min_pos_iou=0.4,
                    neg_iou_thr=0.4,
                    pos_iou_thr=0.55,
                    type='Max3DIoUAssigner'),
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(type='BboxOverlapsNearest3D'),
                    min_pos_iou=0.3,
                    neg_iou_thr=0.3,
                    pos_iou_thr=0.5,
                    type='Max3DIoUAssigner'),
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(type='BboxOverlapsNearest3D'),
                    min_pos_iou=0.3,
                    neg_iou_thr=0.3,
                    pos_iou_thr=0.5,
                    type='Max3DIoUAssigner'),
            ],
            code_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            debug=False,
            pos_weight=-1)),
    type='MVXFasterRCNN')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, type='AdamW', weight_decay=0.01),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=1000, start_factor=0.001,
        type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=24,
        gamma=0.1,
        milestones=[
            20,
            23,
        ],
        type='MultiStepLR'),
]
point_cloud_range = [
    -74.88,
    -74.88,
    -2,
    74.88,
    74.88,
    4,
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='waymo_infos_test.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(pts='testing/velodyne', sweeps='testing/velodyne'),
        data_root=
        '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_format',
        metainfo=dict(classes=[
            'Car',
            'Pedestrian',
            'Cyclist',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                coord_type='LIDAR',
                load_dim=6,
                type='LoadPointsFromFile',
                use_dim=5),
            dict(
                keys=[
                    'points',
                ],
                meta_keys=[
                    'sample_idx',
                    'context_name',
                    'timestamp',
                ],
                type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='WaymoDataset'),
    drop_last=False,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file=
    '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_formatwaymo_infos_val.pkl',
    convert_kitti_format=False,
    data_root=
    '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_format',
    type='WaymoMetric',
    waymo_bin_file='waymo/waymo_format/gt.bin')
test_pipeline = [
    dict(coord_type='LIDAR', load_dim=6, type='LoadPointsFromFile', use_dim=5),
    dict(
        keys=[
            'points',
        ],
        meta_keys=[
            'sample_idx',
            'context_name',
            'timestamp',
        ],
        type='Pack3DDetInputs'),
]
train_cfg = dict(max_epochs=24, type='EpochBasedTrainLoop', val_interval=24)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        ann_file='waymo_infos_train.pkl',
        data_prefix=dict(pts='training/velodyne', sweeps='training/velodyne'),
        data_root=
        '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_format',
        dataset=dict(
            ann_file='waymo_infos_train.pkl',
            backend_args=None,
            box_type_3d='LiDAR',
            data_prefix=dict(
                pts='training/velodyne', sweeps='training/velodyne'),
            data_root='data/waymo/kitti_format/',
            load_interval=5,
            metainfo=dict(classes=[
                'Car',
                'Pedestrian',
                'Cyclist',
            ]),
            modality=dict(use_camera=False, use_lidar=True),
            pipeline=[
                dict(
                    backend_args=None,
                    coord_type='LIDAR',
                    load_dim=6,
                    type='LoadPointsFromFile',
                    use_dim=5),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    flip_ratio_bev_horizontal=0.5,
                    flip_ratio_bev_vertical=0.5,
                    sync_2d=False,
                    type='RandomFlip3D'),
                dict(
                    rot_range=[
                        -0.78539816,
                        0.78539816,
                    ],
                    scale_ratio_range=[
                        0.95,
                        1.05,
                    ],
                    type='GlobalRotScaleTrans'),
                dict(
                    point_cloud_range=[
                        -74.88,
                        -74.88,
                        -2,
                        74.88,
                        74.88,
                        4,
                    ],
                    type='PointsRangeFilter'),
                dict(
                    point_cloud_range=[
                        -74.88,
                        -74.88,
                        -2,
                        74.88,
                        74.88,
                        4,
                    ],
                    type='ObjectRangeFilter'),
                dict(type='PointShuffle'),
                dict(
                    keys=[
                        'points',
                        'gt_bboxes_3d',
                        'gt_labels_3d',
                    ],
                    type='Pack3DDetInputs'),
            ],
            test_mode=False,
            type='WaymoDataset'),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                coord_type='LIDAR',
                load_dim=6,
                type='LoadPointsFromFile',
                use_dim=5),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                db_sampler=dict(
                    classes=[
                        'Car',
                        'Pedestrian',
                        'Cyclist',
                    ],
                    data_root=
                    '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_format',
                    info_path=
                    '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_formatwaymo_dbinfos_train.pkl',
                    prepare=dict(
                        filter_by_difficulty=[
                            -1,
                        ],
                        filter_by_min_points=dict(
                            Car=5, Cyclist=10, Pedestrian=10)),
                    rate=1.0,
                    sample_groups=dict(Car=15, Cyclist=10, Pedestrian=10)),
                type='ObjectSample'),
            dict(
                global_rot_range=[
                    0.0,
                    0.0,
                ],
                num_try=100,
                rot_range=[
                    -0.15707963267,
                    0.15707963267,
                ],
                translation_std=[
                    0.25,
                    0.25,
                    0.25,
                ],
                type='ObjectNoise'),
            dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
            dict(
                rot_range=[
                    -0.78539816,
                    0.78539816,
                ],
                scale_ratio_range=[
                    0.95,
                    1.05,
                ],
                type='GlobalRotScaleTrans'),
            dict(
                point_cloud_range=[
                    -74.88,
                    -74.88,
                    -2,
                    74.88,
                    74.88,
                    4,
                ],
                type='PointsRangeFilter'),
            dict(
                point_cloud_range=[
                    -74.88,
                    -74.88,
                    -2,
                    74.88,
                    74.88,
                    4,
                ],
                type='ObjectRangeFilter'),
            dict(type='PointShuffle'),
            dict(
                keys=[
                    'points',
                    'gt_bboxes_3d',
                    'gt_labels_3d',
                ],
                type='Pack3DDetInputs'),
        ],
        test_mode=False,
        times=2,
        type='WaymoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(coord_type='LIDAR', load_dim=6, type='LoadPointsFromFile', use_dim=5),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        db_sampler=dict(
            classes=[
                'Car',
                'Pedestrian',
                'Cyclist',
            ],
            data_root=
            '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_format',
            info_path=
            '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_formatwaymo_dbinfos_train.pkl',
            prepare=dict(
                filter_by_difficulty=[
                    -1,
                ],
                filter_by_min_points=dict(Car=5, Cyclist=10, Pedestrian=10)),
            rate=1.0,
            sample_groups=dict(Car=15, Cyclist=10, Pedestrian=10)),
        type='ObjectSample'),
    dict(
        global_rot_range=[
            0.0,
            0.0,
        ],
        num_try=100,
        rot_range=[
            -0.15707963267,
            0.15707963267,
        ],
        translation_std=[
            0.25,
            0.25,
            0.25,
        ],
        type='ObjectNoise'),
    dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
    dict(
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        scale_ratio_range=[
            0.95,
            1.05,
        ],
        type='GlobalRotScaleTrans'),
    dict(
        point_cloud_range=[
            -74.88,
            -74.88,
            -2,
            74.88,
            74.88,
            4,
        ],
        type='PointsRangeFilter'),
    dict(
        point_cloud_range=[
            -74.88,
            -74.88,
            -2,
            74.88,
            74.88,
            4,
        ],
        type='ObjectRangeFilter'),
    dict(type='PointShuffle'),
    dict(
        keys=[
            'points',
            'gt_bboxes_3d',
            'gt_labels_3d',
        ],
        type='Pack3DDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='waymo_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(pts='training/velodyne', sweeps='training/velodyne'),
        data_root=
        '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_format',
        metainfo=dict(classes=[
            'Car',
            'Pedestrian',
            'Cyclist',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                coord_type='LIDAR',
                load_dim=6,
                type='LoadPointsFromFile',
                use_dim=5),
            dict(
                keys=[
                    'points',
                ],
                meta_keys=[
                    'sample_idx',
                    'context_name',
                    'timestamp',
                ],
                type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='WaymoDataset'),
    drop_last=False,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file=
    '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_formatwaymo_infos_val.pkl',
    convert_kitti_format=False,
    data_root=
    '/home/012392471@SJSUAD/master_project/mmdetection3d/data/waymo/kitti_format',
    type='WaymoMetric',
    waymo_bin_file='waymo/waymo_format/gt.bin')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='Det3DLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
voxel_size = [
    0.32,
    0.32,
    6,
]
work_dir = './work_dirs/pointpillars_hv_secfpn_sbn-all_16xb2-2x_waymoD5-3d-3class'

11/08 14:55:43 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
11/08 14:55:43 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
